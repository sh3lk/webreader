// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"webreader/ent/schema/ulid"
)

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Name        string
	Description string
	RanobeIDs   []ulid.ID
}

// Mutate applies the CreateCategoryInput on the CategoryCreate builder.
func (i *CreateCategoryInput) Mutate(m *CategoryCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if ids := i.RanobeIDs; len(ids) > 0 {
		m.AddRanobeIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the create builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c)
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	ID              ulid.ID
	Name            *string
	Description     *string
	AddRanobeIDs    []ulid.ID
	RemoveRanobeIDs []ulid.ID
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.AddRanobeIDs; len(ids) > 0 {
		m.AddRanobeIDs(ids...)
	}
	if ids := i.RemoveRanobeIDs; len(ids) > 0 {
		m.RemoveRanobeIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the update builder.
func (u *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCategoryInput on the update-one builder.
func (u *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateRanobeInput represents a mutation input for creating ranobes.
type CreateRanobeInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Name        string
	EngName     string
	RusName     string
	Summary     string
	ReleaseDate int
	CategoryIDs []ulid.ID
	TagIDs      []ulid.ID
}

// Mutate applies the CreateRanobeInput on the RanobeCreate builder.
func (i *CreateRanobeInput) Mutate(m *RanobeCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetEngName(i.EngName)
	m.SetRusName(i.RusName)
	m.SetSummary(i.Summary)
	m.SetReleaseDate(i.ReleaseDate)
	if ids := i.CategoryIDs; len(ids) > 0 {
		m.AddCategoryIDs(ids...)
	}
	if ids := i.TagIDs; len(ids) > 0 {
		m.AddTagIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateRanobeInput on the create builder.
func (c *RanobeCreate) SetInput(i CreateRanobeInput) *RanobeCreate {
	i.Mutate(c)
	return c
}

// UpdateRanobeInput represents a mutation input for updating ranobes.
type UpdateRanobeInput struct {
	ID                ulid.ID
	Name              *string
	EngName           *string
	RusName           *string
	Summary           *string
	ReleaseDate       *int
	AddCategoryIDs    []ulid.ID
	RemoveCategoryIDs []ulid.ID
	AddTagIDs         []ulid.ID
	RemoveTagIDs      []ulid.ID
}

// Mutate applies the UpdateRanobeInput on the RanobeMutation.
func (i *UpdateRanobeInput) Mutate(m *RanobeMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.EngName; v != nil {
		m.SetEngName(*v)
	}
	if v := i.RusName; v != nil {
		m.SetRusName(*v)
	}
	if v := i.Summary; v != nil {
		m.SetSummary(*v)
	}
	if v := i.ReleaseDate; v != nil {
		m.SetReleaseDate(*v)
	}
	if ids := i.AddCategoryIDs; len(ids) > 0 {
		m.AddCategoryIDs(ids...)
	}
	if ids := i.RemoveCategoryIDs; len(ids) > 0 {
		m.RemoveCategoryIDs(ids...)
	}
	if ids := i.AddTagIDs; len(ids) > 0 {
		m.AddTagIDs(ids...)
	}
	if ids := i.RemoveTagIDs; len(ids) > 0 {
		m.RemoveTagIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateRanobeInput on the update builder.
func (u *RanobeUpdate) SetInput(i UpdateRanobeInput) *RanobeUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateRanobeInput on the update-one builder.
func (u *RanobeUpdateOne) SetInput(i UpdateRanobeInput) *RanobeUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTagInput represents a mutation input for creating tags.
type CreateTagInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Name        string
	Description string
	RanobeIDs   []ulid.ID
}

// Mutate applies the CreateTagInput on the TagCreate builder.
func (i *CreateTagInput) Mutate(m *TagCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if ids := i.RanobeIDs; len(ids) > 0 {
		m.AddRanobeIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateTagInput on the create builder.
func (c *TagCreate) SetInput(i CreateTagInput) *TagCreate {
	i.Mutate(c)
	return c
}

// UpdateTagInput represents a mutation input for updating tags.
type UpdateTagInput struct {
	ID              ulid.ID
	Name            *string
	Description     *string
	AddRanobeIDs    []ulid.ID
	RemoveRanobeIDs []ulid.ID
}

// Mutate applies the UpdateTagInput on the TagMutation.
func (i *UpdateTagInput) Mutate(m *TagMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if ids := i.AddRanobeIDs; len(ids) > 0 {
		m.AddRanobeIDs(ids...)
	}
	if ids := i.RemoveRanobeIDs; len(ids) > 0 {
		m.RemoveRanobeIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateTagInput on the update builder.
func (u *TagUpdate) SetInput(i UpdateTagInput) *TagUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTagInput on the update-one builder.
func (u *TagUpdateOne) SetInput(i UpdateTagInput) *TagUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	Name      string
	Priority  int
	CreatedAt *time.Time
	UpdatedAt *time.Time
	UserID    *ulid.ID
}

// Mutate applies the CreateTodoInput on the TodoCreate builder.
func (i *CreateTodoInput) Mutate(m *TodoCreate) {
	m.SetName(i.Name)
	m.SetPriority(i.Priority)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateTodoInput on the create builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c)
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	ID        ulid.ID
	Name      *string
	Priority  *int
	UserID    *ulid.ID
	ClearUser bool
}

// Mutate applies the UpdateTodoInput on the TodoMutation.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the update builder.
func (u *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTodoInput on the update-one builder.
func (u *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email     string
	Password  string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	TodoIDs   []ulid.ID
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if ids := i.TodoIDs; len(ids) > 0 {
		m.AddTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ID            ulid.ID
	Email         *string
	Password      *string
	AddTodoIDs    []ulid.ID
	RemoveTodoIDs []ulid.ID
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if ids := i.AddTodoIDs; len(ids) > 0 {
		m.AddTodoIDs(ids...)
	}
	if ids := i.RemoveTodoIDs; len(ids) > 0 {
		m.RemoveTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
