// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"webreader/ent/ranobe"
	"webreader/ent/schema/ulid"

	"entgo.io/ent/dialect/sql"
)

// Ranobe is the model entity for the Ranobe schema.
type Ranobe struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EngName holds the value of the "engName" field.
	EngName string `json:"engName,omitempty"`
	// RusName holds the value of the "rusName" field.
	RusName string `json:"rusName,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// ReleaseDate holds the value of the "releaseDate" field.
	ReleaseDate int `json:"releaseDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RanobeQuery when eager-loading is set.
	Edges RanobeEdges `json:"edges"`
}

// RanobeEdges holds the relations/edges for other nodes in the graph.
type RanobeEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCategories map[string][]*Category
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e RanobeEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ranobe) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ranobe.FieldReleaseDate:
			values[i] = new(sql.NullInt64)
		case ranobe.FieldName, ranobe.FieldEngName, ranobe.FieldRusName, ranobe.FieldSummary:
			values[i] = new(sql.NullString)
		case ranobe.FieldCreatedAt, ranobe.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ranobe.FieldID:
			values[i] = new(ulid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ranobe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ranobe fields.
func (r *Ranobe) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ranobe.FieldID:
			if value, ok := values[i].(*ulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case ranobe.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case ranobe.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case ranobe.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case ranobe.FieldEngName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engName", values[i])
			} else if value.Valid {
				r.EngName = value.String
			}
		case ranobe.FieldRusName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rusName", values[i])
			} else if value.Valid {
				r.RusName = value.String
			}
		case ranobe.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				r.Summary = value.String
			}
		case ranobe.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field releaseDate", values[i])
			} else if value.Valid {
				r.ReleaseDate = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCategories queries the "categories" edge of the Ranobe entity.
func (r *Ranobe) QueryCategories() *CategoryQuery {
	return (&RanobeClient{config: r.config}).QueryCategories(r)
}

// Update returns a builder for updating this Ranobe.
// Note that you need to call Ranobe.Unwrap() before calling this method if this Ranobe
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Ranobe) Update() *RanobeUpdateOne {
	return (&RanobeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Ranobe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Ranobe) Unwrap() *Ranobe {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ranobe is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Ranobe) String() string {
	var builder strings.Builder
	builder.WriteString("Ranobe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("engName=")
	builder.WriteString(r.EngName)
	builder.WriteString(", ")
	builder.WriteString("rusName=")
	builder.WriteString(r.RusName)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(r.Summary)
	builder.WriteString(", ")
	builder.WriteString("releaseDate=")
	builder.WriteString(fmt.Sprintf("%v", r.ReleaseDate))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCategories returns the Categories named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Ranobe) NamedCategories(name string) ([]*Category, error) {
	if r.Edges.namedCategories == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedCategories[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Ranobe) appendNamedCategories(name string, edges ...*Category) {
	if r.Edges.namedCategories == nil {
		r.Edges.namedCategories = make(map[string][]*Category)
	}
	if len(edges) == 0 {
		r.Edges.namedCategories[name] = []*Category{}
	} else {
		r.Edges.namedCategories[name] = append(r.Edges.namedCategories[name], edges...)
	}
}

// Ranobes is a parsable slice of Ranobe.
type Ranobes []*Ranobe

func (r Ranobes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
