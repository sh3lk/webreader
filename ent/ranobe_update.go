// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"webreader/ent/category"
	"webreader/ent/predicate"
	"webreader/ent/ranobe"
	"webreader/ent/schema/ulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RanobeUpdate is the builder for updating Ranobe entities.
type RanobeUpdate struct {
	config
	hooks    []Hook
	mutation *RanobeMutation
}

// Where appends a list predicates to the RanobeUpdate builder.
func (ru *RanobeUpdate) Where(ps ...predicate.Ranobe) *RanobeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RanobeUpdate) SetName(s string) *RanobeUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetEngName sets the "engName" field.
func (ru *RanobeUpdate) SetEngName(s string) *RanobeUpdate {
	ru.mutation.SetEngName(s)
	return ru
}

// SetRusName sets the "rusName" field.
func (ru *RanobeUpdate) SetRusName(s string) *RanobeUpdate {
	ru.mutation.SetRusName(s)
	return ru
}

// SetSummary sets the "summary" field.
func (ru *RanobeUpdate) SetSummary(s string) *RanobeUpdate {
	ru.mutation.SetSummary(s)
	return ru
}

// SetReleaseDate sets the "releaseDate" field.
func (ru *RanobeUpdate) SetReleaseDate(i int) *RanobeUpdate {
	ru.mutation.ResetReleaseDate()
	ru.mutation.SetReleaseDate(i)
	return ru
}

// AddReleaseDate adds i to the "releaseDate" field.
func (ru *RanobeUpdate) AddReleaseDate(i int) *RanobeUpdate {
	ru.mutation.AddReleaseDate(i)
	return ru
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (ru *RanobeUpdate) AddCategoryIDs(ids ...ulid.ID) *RanobeUpdate {
	ru.mutation.AddCategoryIDs(ids...)
	return ru
}

// AddCategories adds the "categories" edges to the Category entity.
func (ru *RanobeUpdate) AddCategories(c ...*Category) *RanobeUpdate {
	ids := make([]ulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCategoryIDs(ids...)
}

// Mutation returns the RanobeMutation object of the builder.
func (ru *RanobeUpdate) Mutation() *RanobeMutation {
	return ru.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (ru *RanobeUpdate) ClearCategories() *RanobeUpdate {
	ru.mutation.ClearCategories()
	return ru
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (ru *RanobeUpdate) RemoveCategoryIDs(ids ...ulid.ID) *RanobeUpdate {
	ru.mutation.RemoveCategoryIDs(ids...)
	return ru
}

// RemoveCategories removes "categories" edges to Category entities.
func (ru *RanobeUpdate) RemoveCategories(c ...*Category) *RanobeUpdate {
	ids := make([]ulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RanobeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RanobeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RanobeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RanobeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RanobeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RanobeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ranobe.Table,
			Columns: ranobe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ranobe.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldName,
		})
	}
	if value, ok := ru.mutation.EngName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldEngName,
		})
	}
	if value, ok := ru.mutation.RusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldRusName,
		})
	}
	if value, ok := ru.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldSummary,
		})
	}
	if value, ok := ru.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranobe.FieldReleaseDate,
		})
	}
	if value, ok := ru.mutation.AddedReleaseDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranobe.FieldReleaseDate,
		})
	}
	if ru.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ranobe.CategoriesTable,
			Columns: ranobe.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !ru.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ranobe.CategoriesTable,
			Columns: ranobe.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ranobe.CategoriesTable,
			Columns: ranobe.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ranobe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RanobeUpdateOne is the builder for updating a single Ranobe entity.
type RanobeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RanobeMutation
}

// SetName sets the "name" field.
func (ruo *RanobeUpdateOne) SetName(s string) *RanobeUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetEngName sets the "engName" field.
func (ruo *RanobeUpdateOne) SetEngName(s string) *RanobeUpdateOne {
	ruo.mutation.SetEngName(s)
	return ruo
}

// SetRusName sets the "rusName" field.
func (ruo *RanobeUpdateOne) SetRusName(s string) *RanobeUpdateOne {
	ruo.mutation.SetRusName(s)
	return ruo
}

// SetSummary sets the "summary" field.
func (ruo *RanobeUpdateOne) SetSummary(s string) *RanobeUpdateOne {
	ruo.mutation.SetSummary(s)
	return ruo
}

// SetReleaseDate sets the "releaseDate" field.
func (ruo *RanobeUpdateOne) SetReleaseDate(i int) *RanobeUpdateOne {
	ruo.mutation.ResetReleaseDate()
	ruo.mutation.SetReleaseDate(i)
	return ruo
}

// AddReleaseDate adds i to the "releaseDate" field.
func (ruo *RanobeUpdateOne) AddReleaseDate(i int) *RanobeUpdateOne {
	ruo.mutation.AddReleaseDate(i)
	return ruo
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (ruo *RanobeUpdateOne) AddCategoryIDs(ids ...ulid.ID) *RanobeUpdateOne {
	ruo.mutation.AddCategoryIDs(ids...)
	return ruo
}

// AddCategories adds the "categories" edges to the Category entity.
func (ruo *RanobeUpdateOne) AddCategories(c ...*Category) *RanobeUpdateOne {
	ids := make([]ulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCategoryIDs(ids...)
}

// Mutation returns the RanobeMutation object of the builder.
func (ruo *RanobeUpdateOne) Mutation() *RanobeMutation {
	return ruo.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (ruo *RanobeUpdateOne) ClearCategories() *RanobeUpdateOne {
	ruo.mutation.ClearCategories()
	return ruo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (ruo *RanobeUpdateOne) RemoveCategoryIDs(ids ...ulid.ID) *RanobeUpdateOne {
	ruo.mutation.RemoveCategoryIDs(ids...)
	return ruo
}

// RemoveCategories removes "categories" edges to Category entities.
func (ruo *RanobeUpdateOne) RemoveCategories(c ...*Category) *RanobeUpdateOne {
	ids := make([]ulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCategoryIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RanobeUpdateOne) Select(field string, fields ...string) *RanobeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Ranobe entity.
func (ruo *RanobeUpdateOne) Save(ctx context.Context) (*Ranobe, error) {
	var (
		err  error
		node *Ranobe
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RanobeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ranobe)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RanobeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RanobeUpdateOne) SaveX(ctx context.Context) *Ranobe {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RanobeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RanobeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RanobeUpdateOne) sqlSave(ctx context.Context) (_node *Ranobe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ranobe.Table,
			Columns: ranobe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ranobe.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ranobe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ranobe.FieldID)
		for _, f := range fields {
			if !ranobe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ranobe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldName,
		})
	}
	if value, ok := ruo.mutation.EngName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldEngName,
		})
	}
	if value, ok := ruo.mutation.RusName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldRusName,
		})
	}
	if value, ok := ruo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ranobe.FieldSummary,
		})
	}
	if value, ok := ruo.mutation.ReleaseDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranobe.FieldReleaseDate,
		})
	}
	if value, ok := ruo.mutation.AddedReleaseDate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ranobe.FieldReleaseDate,
		})
	}
	if ruo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ranobe.CategoriesTable,
			Columns: ranobe.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !ruo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ranobe.CategoriesTable,
			Columns: ranobe.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ranobe.CategoriesTable,
			Columns: ranobe.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ranobe{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ranobe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
