type User implements Node {
    id: ID!
    email: String!
    password: String!
    todos: [Todo!]!
    createdAt: String!
    updatedAt: String!
}

type UserConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [UserEdge]
}

type UserEdge {
    node: User
    cursor: Cursor!
}

input CreateUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    id: ID!
    email: String!
    password: String!
}

extend type Query {
    user(id: ID): User
    users(after: Cursor, first: Int, before: Cursor, last: Int, where: UserWhereInput): UserConnection
}

extend type Mutation {
    createUser(input: CreateUserInput!): User!
    createUserWithTodo(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
}
